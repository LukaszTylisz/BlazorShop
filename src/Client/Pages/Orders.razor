@page "/Orders"
@using BlazorShop.Resources
@using Client.HttpClients
@using global::Shared.DTOs
@using global::Shared.Enums
@using global::Shared.Extensions
@inject ShopHttpClient ShopHttpClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<h1>Orders</h1>

<p>
    <button @onclick="() => NavigateToCreatingOrder()" class="button create-button">Create</button>
</p>

@foreach (var order in OrdersShop)
{
    <div class="order">
        <strong>Customer:</strong> @order.CustomerName
        <br />
        <strong>Customer city:</strong> @order.City
        <br />
        <strong>Customer street:</strong> @order.Street
        <br />
        <strong>Order status:</strong> <span class="orange-text bold">@order.OrderStatus.GetDescription()</span>
        <br />
        <strong>Order creation date:</strong> @order.CreationDate.ToShortDateString()
        <br />
        <strong>Order total price:</strong> @order.TotalPrice EUR
        <br />
        <div class="order-item">
            @foreach (var orderItem in order.OrderItems)
            {
                <div>
                    <strong>Product:</strong> @orderItem.ProductName
                    <br />
                    <strong>Quantity:</strong> @orderItem.Quantity
                    <br />
                    <strong>Price:</strong> @orderItem.Price EUR
                    <hr />
                </div>
            }
        </div>
        @if (order.OrderStatus == OrderStatus.New)
        {
            <div class="inline-block">
                <button @onclick="() => ChangeOrderStatus(order, OrderStatus.Paid)" class="button">Paid</button>
            </div>
            <div class="inline-block">
                <button @onclick="() => ChangeOrderStatus(order, OrderStatus.Cancelled)" class="button">Cancelled</button>
            </div>
        }
        else if (order.OrderStatus == OrderStatus.Paid)
        {
            <div class="inline-block">
                <button @onclick="() => ChangeOrderStatus(order, OrderStatus.Shipped)" class="button">Shipped</button>
            </div>
        }
    </div>
}

@code {
    public List<OrderDto> OrdersShop = new List<OrderDto>();

    protected override async Task OnInitializedAsync()
    {
        OrdersShop = await ShopHttpClient.GetOrders();
    }

    private async Task ChangeOrderStatus(OrderDto order, OrderStatus orderStatus)
    {
        await ShopHttpClient.ChangeOrderStatus(order.Id, orderStatus);
        order.OrderStatus = orderStatus;

        ToastService.ShowSuccess(Messages.OrderStatusChanged);
    }

    private void NavigateToCreatingOrder()
    {
        NavigationManager.NavigateTo($"/CreateOrder");
    }


}
